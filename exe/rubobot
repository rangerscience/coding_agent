#!/usr/bin/env ruby
# frozen_string_literal: true

require "debug"

LIBRARY_PATH = File.expand_path("../lib", __dir__)
$LOAD_PATH.unshift(LIBRARY_PATH) unless $LOAD_PATH.include?(LIBRARY_PATH)

require "bundler/setup"
require "ruby_llm"
require "rubobot"

RubyLLM.configure do |config|
  config.anthropic_api_key = ENV.fetch("ANTHROPIC_API_KEY", nil)
  config.default_model = "claude-3-7-sonnet"

  config.retry_interval = 60 # seconds
  config.retry_backoff_factor = 2
end

# Display help information if requested
if ARGV.include?("--help") || ARGV.include?("-h")
  puts "Usage: rubobot \"Your prompt here\""
  puts ""
  puts "Options:"
  puts "  --help, -h    Show this help message"
  puts ""
  puts "Examples:"
  puts "  rubobot \"Check if my Gemfile has the latest version of Rails\""
  puts "  rubobot \"Add RSpec to my project\""
  exit 1
end

def read_file(path)
  File.exist?(path) ? File.read(path).strip : nil
end

working_dir = File.expand_path(`pwd`.strip)
prompt = read_file(File.join(".ai", "scratch", "prompt.txt")) || ARGV.join(" ")

begin
  puts '################ Rubobot ################'
  agent = Rubobot::Rubobot.new
  agent.chat(prompt) if !prompt.empty?
  agent.run
rescue RubyLLM::Error => e
  File.write(File.join(".ai", "scratch", "prompt.txt"), msg)
  puts "Error: #{e.message}"
  debugger
rescue StandardError => e
  File.write(File.join(".ai", "scratch", "prompt.txt"), msg)
  puts "Error: #{e.message}"
  debugger
end
